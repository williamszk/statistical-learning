
// -------------------------------------------------------------------- //

#include <stdio.h>
#include <stdlib.h>

int main()
{
    printf("Hello World!\n");
    return 0;
}

// -------------------------------------------------------------------- //
float myAnswer1 = (float) 5/2 ;
float myAnswer2 = 5/2 ;

printf("%f\n", myAnswer1); // 2.5
printf("%f\n", myAnswer2); // 2.0

// -------------------------------------------------------------------- //

float myAnswer1 = (float) 5.0/2.0 ; // there is no need for this explicit casting
float myAnswer2 = 5.0/2.0 ;

printf("%f\n", myAnswer1); // 2.5
printf("%f\n", myAnswer2); // 2.5

// -------------------------------------------------------------------- //
float myAnswer = 5.0/2 ;
// implict casting
// when we make operations with a float type everything is converted to float
printf("%f\n", myAnswer); // 2.5

// -------------------------------------------------------------------- //
double myNum = 2;
printf("%f\n", myNum); // 2.0

double myNum2 = 2.0;
printf("%f\n", myNum2); // 2.0

// using 2.0 instead of 2 when using double does not make any difference

// -------------------------------------------------------------------- //

double myNum = 9;
int myResult =  (int) myNum/ 2;
printf("%d\n",myResult); // 4

// -------------------------------------------------------------------- //

double myNum = 9;
printf("%f\n",myNum/ 2);  // 4.5

// -------------------------------------------------------------------- //

double myNum = 9;
printf("%d\n", (int)myNum / 2); // 4

// -------------------------------------------------------------------- //

int convertCharToInt(char char1, char char2, char char3)
{
    // 0 -> 48
    // 9 -> 57
    int convChar1 = (int) char1;
    int convChar2 = (int) char2;
    int convChar3 = (int) char3;

    if (convChar1 < 48 || convChar1 > 57) {
        printf("Error: The first argument is not a number. The given argument is: '%c'\n", char1);
        return -1;
    } else if (convChar2 < 48 || convChar2 > 57) {
        printf("Error: The second argument is not a number. The given argument is: '%c'\n", char2);
        return -1;
    } else if (convChar3 < 48 || convChar3 > 57) {
        printf("Error: The third argument is not a number. The given argument is: '%c'\n", char3);
        return -1;
    }

    int convCharNum1 = convChar1 - 48;
    int convCharNum2 = convChar2 - 48;
    int convCharNum3 = convChar3 - 48;

    int convertedNum = convCharNum1*100 + convCharNum2*10 + convCharNum3;

    return convertedNum;
}

int main()
{
    
    int convertedNum = convertCharToInt('9', '2', 'f');
    printf("The converted number is: %d\n", convertedNum);
    
    return 0;
}

// -------------------------------------------------------------------- //

int getAmtOfDigitsSmallerThanADigit(int num, int digit)
{
    int amtOfDigitsSmaller = 0;
    int numHolder = num;

    while (numHolder > 0)
    {
    int theRest = numHolder % 10;
    if (theRest < digit)
    {
        ++amtOfDigitsSmaller;
    }

    numHolder /= 10;
    }
    
    return amtOfDigitsSmaller;
}

int main()
{
    int amtOfDigitsSmaller;

    amtOfDigitsSmaller = getAmtOfDigitsSmallerThanADigit(12345, 3);
    printf("This should be 2: %d\n", amtOfDigitsSmaller);

    amtOfDigitsSmaller = getAmtOfDigitsSmallerThanADigit(123456789, 5);
    printf("This should be 4: %d\n", amtOfDigitsSmaller);

    return 0;
}

// -------------------------------------------------------------------- //

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

float derivative(float slopecoeff, float xvar, float powercoeff)
{
    float derivativeValue = slopecoeff*powercoeff*pow(xvar, powercoeff-1);
    return derivativeValue;
}

int main()
{
    float derivativeValue = derivative(2,2,2);

    printf("The derivative of c*n^2: %f\n", derivativeValue);

    return 0;
}

// gcc main.c -lm

// -------------------------------------------------------------------- //

#include <stdio.h>
#include <stdlib.h>

int main()
{
    // When we try to use declared but not assigned itens in the array
    // they show strange numbers, so we need to be careful with 
    // unassigned values of arrays
    int myGrades[5];

    for (int i = 0; i < 5; i++)
    {
        printf("%d\n", myGrades[i]);
    }
    return 0;
}

// The size of the array must be specified before hand
// before we can use it
// so that the machine can alocate and reserve the necessary space
// in memory to operate with the array

// -------------------------------------------------------------------- //

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int sizeArray = 10;
    double salaries[sizeArray];

    for (int i = 0; i < sizeArray; i++)
    {
        printf("%f\n", salaries[i]);
    }

    return 0;
    // from here we can notice that we can use a variable to assign the size of the array
    // when using double the default value for unassigned values is 0
}

// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



// -------------------------------------------------------------------- //



